parameters:
- name: UpdatePowerBIDatasetTableSchema
  displayName: Update the Power BI Table schema to the latest schema
  default: true
  type: boolean

- name: DeleteAllOrganizationData
  displayName: Delete all data in Power BI Simeon Data source
  default: true
  type: boolean

- name: InstallPowerBIReport
  displayName: Install the Power BI report, delete existing report
  default: false
  type: boolean

- name: BackfillHours
  displayName: Number of hours to include in backfill
  default: 72
  type: number

variables:
- group: Sync
name: $(Date:yyyyMMdd)$(Rev:.r)
trigger: none
pool:
  vmImage: windows-latest
resources:
  repositories:
  - repository: Reporting
    type: github
    name: simeoncloud/reporting
    ref: refs/heads/feature/installReport
    endpoint: simeoncloud
jobs:
- job: Job
  timeoutInMinutes: 600
  steps:
  - checkout: Reporting
  
  - pwsh: 
      Get-ChildItem -Path .\SimeonSyncPowerBI -Filter "*.psm1" -Recurse | Import-Module -Force;
      Connect-PowerBIAsServicePrincipal -AppId $env:PowerBIAppId -AppSecret (ConvertTo-SecureString $(PowerBIAppSecret) -AsPlainText -Force) -Tenant $env:PowerBITenant;
      Install-SimeonSyncTable;
    condition: and(succeeded(), ${{ parameters.UpdatePowerBIDatasetTableSchema }})
    name: UpdateDatasetTableSchema
    displayName: Update dataset table schema
  
  - pwsh: 
      Get-ChildItem -Path .\SimeonSyncPowerBI -Filter "*.psm1" -Recurse | Import-Module -Force;
      Connect-PowerBIAsServicePrincipal -AppId $env:PowerBIAppId -AppSecret (ConvertTo-SecureString $(PowerBIAppSecret) -AsPlainText -Force) -Tenant $env:PowerBITenant;
      Clear-PowerBITable;
    condition: and(succeeded(), ${{ parameters.DeleteAllOrganizationData }})
    name: ClearPowerBITable
    displayName: Clear all data from PowerBI

  - pwsh: 
      Get-ChildItem -Path .\SimeonSyncPowerBI -Filter "*.psm1" -Recurse | Import-Module -Force;
      Connect-PowerBIAsServicePrincipal -AppId $env:PowerBIAppId -AppSecret (ConvertTo-SecureString $(PowerBIAppSecret) -AsPlainText -Force) -Tenant $env:PowerBITenant;
      Install-SimeonSyncReport -PowerBIReportFilePath '.\SimeonSyncPowerBI\Baseline Compliance Report.pbix' -PowerBIDataSourceModelId $env:PowerBIDataSourceModelId;
    condition: and(succeeded(), ${{ parameters.InstallPowerBIReport }})
    name: InstallPowerBIReport
    displayName: Install Power BI Report
    
  - pwsh: |
      try {
          Get-ChildItem -Path .\SimeonSyncPowerBI -Filter "*.psm1" -Recurse | Import-Module -Force;
          Connect-PowerBIAsServicePrincipal -AppId $env:PowerBIAppId -AppSecret (ConvertTo-SecureString $(PowerBIAppSecret) -AsPlainText -Force) -Tenant $env:PowerBITenant
          Invoke-SimeonSyncPowerBIBackfill -OrganizationUri "$(System.CollectionUri)" -PersonalAccessToken $(System.AccessToken) -BackfillHours ${{ parameters.BackfillHours }}
      } catch {
          Write-Error -ErrorRecord $_ -EA Continue
          Write-Error -ErrorRecord (Resolve-PowerBIError -Last) -EA Continue
          Write-Error "An error occurred running the backfill."
      }
    name: Backfill
    displayName: Backfill PowerBI

  - task: PublishPipelineArtifact@1
    displayName: Publish sources
    condition: always()
    continueOnError: true
    inputs:
      targetPath: $(Build.SourcesDirectory)
      artifactName: Sources